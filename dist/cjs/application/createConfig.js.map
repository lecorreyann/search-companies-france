{
  "version": 3,
  "sources": ["../../esm/application/createConfig.js"],
  "sourcesContent": ["import fs from \"fs\";\nimport ErrorTexts from \"./ErrorTexts.js\";\nexport default function createConfig(configName = \"config.json\", payload) {\n    const keys = Object.keys(payload);\n    const pathConfig = `${process.cwd()}/${configName}`;\n    if (keys.length !== 1) {\n        throw new Error(ErrorTexts.TRY_TO_SET_INVALID_CONFIG);\n    }\n    if (!keys.includes(\"INSEE_API_KEY\"))\n        throw new Error(ErrorTexts.TRY_TO_SET_INVALID_CONFIG);\n    if (payload.INSEE_API_KEY.trim() === \"\")\n        throw new Error(ErrorTexts.INSEE_API_KEY_IS_EMPTY);\n    if (fs.existsSync(pathConfig))\n        fs.unlinkSync(pathConfig);\n    fs.writeFileSync(pathConfig, JSON.stringify(payload));\n    if (!fs.existsSync(pathConfig))\n        throw new Error(ErrorTexts.ERROR_CREATING_CONFIG_FILE);\n    const config = JSON.parse(fs.readFileSync(pathConfig, \"utf8\"));\n    if (!config.INSEE_API_KEY) {\n        throw new Error(ErrorTexts.ERROR_CREATING_CONFIG_FILE_INSEE_API_KEY_NOT_SET);\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAe;AACf,wBAAuB;AACR,SAAR,aAA8B,aAAa,eAAe,SAAS;AACtE,QAAM,OAAO,OAAO,KAAK,OAAO;AAChC,QAAM,aAAa,GAAG,QAAQ,IAAI,KAAK;AACvC,MAAI,KAAK,WAAW,GAAG;AACnB,UAAM,IAAI,MAAM,kBAAAA,QAAW,yBAAyB;AAAA,EACxD;AACA,MAAI,CAAC,KAAK,SAAS,eAAe;AAC9B,UAAM,IAAI,MAAM,kBAAAA,QAAW,yBAAyB;AACxD,MAAI,QAAQ,cAAc,KAAK,MAAM;AACjC,UAAM,IAAI,MAAM,kBAAAA,QAAW,sBAAsB;AACrD,MAAI,UAAAC,QAAG,WAAW,UAAU;AACxB,cAAAA,QAAG,WAAW,UAAU;AAC5B,YAAAA,QAAG,cAAc,YAAY,KAAK,UAAU,OAAO,CAAC;AACpD,MAAI,CAAC,UAAAA,QAAG,WAAW,UAAU;AACzB,UAAM,IAAI,MAAM,kBAAAD,QAAW,0BAA0B;AACzD,QAAM,SAAS,KAAK,MAAM,UAAAC,QAAG,aAAa,YAAY,MAAM,CAAC;AAC7D,MAAI,CAAC,OAAO,eAAe;AACvB,UAAM,IAAI,MAAM,kBAAAD,QAAW,gDAAgD;AAAA,EAC/E;AACJ;",
  "names": ["ErrorTexts", "fs"]
}
