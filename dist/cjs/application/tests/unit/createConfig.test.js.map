{
  "version": 3,
  "sources": ["../../../../esm/application/tests/unit/createConfig.test.js"],
  "sourcesContent": ["import createConfig from \"../../../application/createConfig.js\";\nimport ErrorTexts from \"../../../application/ErrorTexts.js\";\nimport fs from \"fs\";\ndescribe(\"createConfig\", () => {\n    const pathConfig = `fakeConfig.json`;\n    it(\"createConfig with invalid configuration payload\", () => {\n        // @ts-ignore\n        expect(() => createConfig(pathConfig, { TEST: \"test\" })).toThrow(ErrorTexts.TRY_TO_SET_INVALID_CONFIG);\n    });\n    it(\"createConfig with empty INSEE_API_KEY\", () => {\n        expect(() => createConfig(pathConfig, { INSEE_API_KEY: \"\" })).toThrow(ErrorTexts.INSEE_API_KEY_IS_EMPTY);\n    });\n    it(\"createConfig creates config file\", () => {\n        createConfig(pathConfig, { INSEE_API_KEY: \"test\" });\n        const config = JSON.parse(fs.readFileSync(pathConfig, \"utf8\"));\n        expect(config).toEqual({ INSEE_API_KEY: \"test\" });\n    });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,0BAAyB;AACzB,wBAAuB;AACvB,gBAAe;AACf,SAAS,gBAAgB,MAAM;AAC3B,QAAM,aAAa;AACnB,KAAG,mDAAmD,MAAM;AAExD,WAAO,UAAM,oBAAAA,SAAa,YAAY,EAAE,MAAM,OAAO,CAAC,CAAC,EAAE,QAAQ,kBAAAC,QAAW,yBAAyB;AAAA,EACzG,CAAC;AACD,KAAG,yCAAyC,MAAM;AAC9C,WAAO,UAAM,oBAAAD,SAAa,YAAY,EAAE,eAAe,GAAG,CAAC,CAAC,EAAE,QAAQ,kBAAAC,QAAW,sBAAsB;AAAA,EAC3G,CAAC;AACD,KAAG,oCAAoC,MAAM;AACzC,4BAAAD,SAAa,YAAY,EAAE,eAAe,OAAO,CAAC;AAClD,UAAM,SAAS,KAAK,MAAM,UAAAE,QAAG,aAAa,YAAY,MAAM,CAAC;AAC7D,WAAO,MAAM,EAAE,QAAQ,EAAE,eAAe,OAAO,CAAC;AAAA,EACpD,CAAC;AACL,CAAC;",
  "names": ["createConfig", "ErrorTexts", "fs"]
}
