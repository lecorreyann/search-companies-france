{
  "version": 3,
  "sources": ["../../../../esm/application/tests/feature/renewINSEEApiAccessToken.test.js"],
  "sourcesContent": ["import getINSEEApiAccessToken from \"../../../application/getINSEEApiAccessToken.js\";\nimport renewINSEEApiAccessToken from \"../../../application/renewINSEEApiAccessToken.js\";\nimport fs from \"fs\";\nafterAll(() => {\n    const pathConfig = `fakeConfig.json`;\n    if (fs.existsSync(pathConfig)) {\n        fs.unlinkSync(pathConfig);\n    }\n});\ndescribe(\"renewINSEEApiAccessToken\", () => {\n    it(\"renewINSEEApiAccessToken when fakeConfig.json does not exist\", async () => {\n        const pathConfig = `fakeConfig.json`;\n        if (fs.existsSync(pathConfig)) {\n            fs.unlinkSync(pathConfig);\n        }\n        expect(fs.existsSync(pathConfig)).toBe(false);\n        await renewINSEEApiAccessToken();\n        const accessToken = await getINSEEApiAccessToken();\n        expect(accessToken).toBeDefined();\n    });\n    it(\"renewINSEEApiAccessToken when config.json exists\", async () => {\n        await renewINSEEApiAccessToken();\n        const accessToken = await getINSEEApiAccessToken();\n        expect(accessToken).toBeDefined();\n    });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,oCAAmC;AACnC,sCAAqC;AACrC,gBAAe;AACf,SAAS,MAAM;AACX,QAAM,aAAa;AACnB,MAAI,UAAAA,QAAG,WAAW,UAAU,GAAG;AAC3B,cAAAA,QAAG,WAAW,UAAU;AAAA,EAC5B;AACJ,CAAC;AACD,SAAS,4BAA4B,MAAM;AACvC,KAAG,gEAAgE,YAAY;AAC3E,UAAM,aAAa;AACnB,QAAI,UAAAA,QAAG,WAAW,UAAU,GAAG;AAC3B,gBAAAA,QAAG,WAAW,UAAU;AAAA,IAC5B;AACA,WAAO,UAAAA,QAAG,WAAW,UAAU,CAAC,EAAE,KAAK,KAAK;AAC5C,cAAM,gCAAAC,SAAyB;AAC/B,UAAM,cAAc,UAAM,8BAAAC,SAAuB;AACjD,WAAO,WAAW,EAAE,YAAY;AAAA,EACpC,CAAC;AACD,KAAG,oDAAoD,YAAY;AAC/D,cAAM,gCAAAD,SAAyB;AAC/B,UAAM,cAAc,UAAM,8BAAAC,SAAuB;AACjD,WAAO,WAAW,EAAE,YAAY;AAAA,EACpC,CAAC;AACL,CAAC;",
  "names": ["fs", "renewINSEEApiAccessToken", "getINSEEApiAccessToken"]
}
