{
  "version": 3,
  "sources": ["../../esm/application/getINSEEApiAccessToken.js"],
  "sourcesContent": ["import getNewTokenFromINSEEApi from \"../infrastructure/getNewTokenFromINSEEApi.js\";\nimport fs from \"fs\";\nexport default async function getINSEEApiAccessToken() {\n    const pathConfig = `${process.cwd()}/config.json`;\n    if (!fs.existsSync(pathConfig)) {\n        // call getNewTokenFromINSEEApi\n        const response = await getNewTokenFromINSEEApi();\n        const data = (await response.json());\n        const accessToken = data.access_token;\n        const config = {\n            INSEE_API_KEY: accessToken,\n        };\n        // save the access token in a config file\n        fs.writeFileSync(pathConfig, JSON.stringify(config));\n        return accessToken;\n    }\n    else if (!fs.readFileSync(pathConfig, \"utf8\")) {\n        throw new Error(`${pathConfig} is empty`);\n    }\n    else if (!JSON.parse(fs.readFileSync(pathConfig, \"utf8\")).INSEE_API_KEY) {\n        throw new Error(`${pathConfig} is missing INSEE_API_KEY`);\n    }\n    else {\n        const config = JSON.parse(fs.readFileSync(pathConfig, \"utf8\"));\n        const accessToken = config.INSEE_API_KEY;\n        return accessToken;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAoC;AACpC,gBAAe;AACf,eAAO,yBAAgD;AACnD,QAAM,aAAa,GAAG,QAAQ,IAAI;AAClC,MAAI,CAAC,UAAAA,QAAG,WAAW,UAAU,GAAG;AAE5B,UAAM,WAAW,UAAM,+BAAAC,SAAwB;AAC/C,UAAM,OAAQ,MAAM,SAAS,KAAK;AAClC,UAAM,cAAc,KAAK;AACzB,UAAM,SAAS;AAAA,MACX,eAAe;AAAA,IACnB;AAEA,cAAAD,QAAG,cAAc,YAAY,KAAK,UAAU,MAAM,CAAC;AACnD,WAAO;AAAA,EACX,WACS,CAAC,UAAAA,QAAG,aAAa,YAAY,MAAM,GAAG;AAC3C,UAAM,IAAI,MAAM,GAAG,qBAAqB;AAAA,EAC5C,WACS,CAAC,KAAK,MAAM,UAAAA,QAAG,aAAa,YAAY,MAAM,CAAC,EAAE,eAAe;AACrE,UAAM,IAAI,MAAM,GAAG,qCAAqC;AAAA,EAC5D,OACK;AACD,UAAM,SAAS,KAAK,MAAM,UAAAA,QAAG,aAAa,YAAY,MAAM,CAAC;AAC7D,UAAM,cAAc,OAAO;AAC3B,WAAO;AAAA,EACX;AACJ;",
  "names": ["fs", "getNewTokenFromINSEEApi"]
}
